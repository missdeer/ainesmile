diff --git a/src/EditView.cxx b/src/EditView.cxx
index 7070bc60..d99fbd54 100644
--- a/src/EditView.cxx
+++ b/src/EditView.cxx
@@ -505,6 +505,12 @@ void EditView::LayoutLine(const EditModel &model, Surface *surface, const ViewSt
 			// If only 1 thread needed then use the main thread, else spin up multiple
 			const std::launch policy = (multiThreaded) ? std::launch::async : std::launch::deferred;
 
+#if defined (_OPENMP)
+#pragma omp parallel num_threads(threads)
+			{
+				LayoutSegments(pCache, surface, vstyle, ll, segments, nextIndex, textUnicode, multiThreadedContext);
+			}
+#else
 			std::vector<std::future<void>> futures;
 			for (size_t th = 0; th < threads; th++) {
 				// Find relative positions of everything except for tabs
@@ -517,6 +523,7 @@ void EditView::LayoutLine(const EditModel &model, Surface *surface, const ViewSt
 			for (const std::future<void> &f : futures) {
 				f.wait();
 			}
+#endif
 		}
 
 		// Accumulate absolute positions from relative positions within segments and expand tabs
diff --git a/src/Editor.cxx b/src/Editor.cxx
index 12076e00..7b124c29 100644
--- a/src/Editor.cxx
+++ b/src/Editor.cxx
@@ -1519,6 +1519,34 @@ bool Editor::WrapBlock(Surface *surface, Sci::Line lineToWrap, Sci::Line lineToW
 	// Protect the line layout cache from being accessed from multiple threads simultaneously
 	std::mutex mutexRetrieve;
 
+#if defined (_OPENMP)
+#pragma omp parallel num_threads(threads)
+	{
+		// llTemporary is reused for non-significant lines, avoiding allocation costs.
+		std::shared_ptr<LineLayout> llTemporary = std::make_shared<LineLayout>(-1, 200);
+		while (true) {
+			const size_t i = nextIndex.fetch_add(1, std::memory_order_acq_rel);
+			if (i >= linesBeingWrapped) {
+				break;
+			}
+			const Sci::Line lineNumber = lineToWrap + i;
+			const Range rangeLine = pdoc->LineRange(lineNumber);
+			const Sci::Position lengthLine = rangeLine.Length();
+			if (lengthLine < lengthToMultiThread) {
+				std::shared_ptr<LineLayout> ll;
+				if (significantLines.LineMayCache(lineNumber)) {
+					std::lock_guard<std::mutex> guard(mutexRetrieve);
+					ll = view.RetrieveLineLayout(lineNumber, *this);
+				} else {
+					ll = llTemporary;
+					ll->ReSet(lineNumber, lengthLine);
+				}
+				view.LayoutLine(*this, surface, vs, ll.get(), wrapWidth, multiThreaded);
+				linesAfterWrap[i] = ll->lines;
+			}
+		}
+	}
+#else
 	std::vector<std::future<void>> futures;
 	for (size_t th = 0; th < threads; th++) {
 		std::future<void> fut = std::async(policy,
@@ -1552,6 +1580,7 @@ bool Editor::WrapBlock(Surface *surface, Sci::Line lineToWrap, Sci::Line lineToW
 	for (const std::future<void> &f : futures) {
 		f.wait();
 	}
+#endif
 	// End of multiple threads
 
 	// Multiply duration by number of threads to produce (near) equivalence to duration if single threaded
